2. Http Request & Response
GET : 갖다줘
POST : 처리해줘
PUT : 전체 수정
DELETE : 삭제
PATCH : 교체 수정
OPTION : 메소드 종류 확인

http응답
1xx (정보) : 요청을 받았으며 프로세스를 계속한다.
2xx (성공) : 요청을 성공적으로 받았으며 인식했고 수용했다.
3xx (리다이렉션) : 요청 완료를 위해 추가 작업조치가 필요하다.
4xx (서버 오류) : 서버가 명백히 유효한 요청 충족을 실패했다.


2.5 httpie

httpie 명령어의 시작 = http
형식 : http [flags] [METHOD] URL [ITEM[ITEM]]
flags = 옵션
method = post, get delete 등...
item = 인자
->post, put 방식으로 요청할 경우 : = 표현 ex)x =a
->get 방식으로 요청할 경우 : == 표현 ex)x == a (get은 생략해도 무방)

PUT의 경우
http--json || http--form 두가지 형식이 있음!

3. CBV (1)

views.py는 두가지로 작성 가능
1.function
2.class
->>이 둘은 callable object라는 측면에서 같은 뿌리를 공유하고 있음.
->>>즉 엄밀히 말하자면 django의 view는 callable object로 정의하기때문에

?그렇다면 function말고 class로 정의하는 이유?
결정적으로 class에는 상속의 개념이 있기 때문에 == 중복의 제거, 코드의 재사용 가능.
>>따라서 미리 약속된것들이 많음.

4. REST Architecture

What id REST ARchitecture??

<REST = REpresentational State Transfer>
-http를 이용해 통신하는 네트워크상에서 정한 약속
-분산 하이퍼미디어 시스템을 위한 소프트웨어 설계 형식

*자원 : 인터넷에서 제공하고 얻을 수 있는 모든 것이라고 할 때...
REpresentational : 자원을 대표하는 단어나 식별자로
State Transfer : 자원의 상태를 전송하는 방법
즉, 자원을 이름으로 구분하여 상태를 전송하는 방법

<왜 필요한가??>
(웹의 독립적인 운용과 발전의 측면에서....)
변경사실을 하나하나 알려주지 않아도 되는 방법으로, 하위호환을 깨뜨리지 않고
독립적으로 네트워크가 발전되는 설계 방법이라서.

<조건>
1.server-client : 서버와 클라이언트 존재
2.stateless : 클라이언트의 이전 상태를 기록하지 않는 연결방식 취함 ex)http
3.cache : 캐쉬 처리기능 존재
4.uniform interface : 일관된 인터페이스 제공
	1)indentification of resources : 리소스가 uri로 식병가능해야 함.
	2)manipulation of resources through representations : crud를 http메시지로 수행할 수 있어야 함.
	3)self-descriptive messages : 메시지 자체만으로 모든 것이 설명되어야 함. (송신지, 목적지, 언어, 문법, 구조 등...)
		->그래야 웹이 진화해도 해석가능
	4)hypermedia as the engine of application state(HATEOAS) : 상태의 정의는 하이퍼텍스트로 정의되어야 한다.(예측가능성과 투명한 정보전이를 위해서)
5.layered system : 다층적 구조를 취해야 함.
6.code-on-demand : 서버와 같은 원격지에서 보는 코드로 메소드를 실행시킬 수 있음. ex)js



What is API??

<API = application program interface>
-request, reponse로 오가는 구조화된 데이터
-식당 손님---웨이터----요리사 중 웨이터의 역할수행
:서버와 클라이언트 사이의 메신저 !특정 형식에 맞게!
이렇게 주고받겠다는 '형식' = API문서 : 이런 형식으로 써라~



What is RESTAPI??

:REST 아키텍쳐 스타일을 따르는 API(guideline존재)
야매정의 : http(get, post등)로 crud를 구현할 수 있는 api

**BUT**
이런 형식이 잘 지켜지지 않고 있음/
JSON으로 동작을 많이 해서.
JSON은 모든 태그가 만들어져 있지 않고 만든이가 정의하기 나름이기 때문에
API형식을 맞추기 위해 일일이 link등을 물으러 다니면 곤란하니까~


Django rest framework = REST?
현대의 API들은 self-descriptive(x), HATEOAS(x)....not RESTful


6. View of DRF

ViewSet = View(CRUD)를 설계하는 쉽고 간단한 방법
*코드 복잡도
APIView -> Mixins -> Generic CBV -> ViewSet : 상속해가며 간단해짐


10. ViewSet

내가 임의로 View설계하기, Custom API만들기
@action()
 def fun()이용

(*default get방식 처리)

1. Router : 관례적 mapping관계 자동 생성

ViewSet은 필연적으로 (pk값등) 하나의 path함수로는 처리불가.

그래서 서로 다은 (적어도 2개 이상의)path함수들을 묶어주는 과정이 필요
path(요청을 처리할 url, 요청을 인자로 받아 처리할 함수, namespace)
==Path함수의 두 번째 인자(로 오는 함수)를 묶기!

두 번째 인자로 올 함수들 (묶어줘야 할 함수들)
ex)list(), create(), retrieve(), update(), partial_update(), destroy()

>>>as_view가 그 역할을 함
as_view({'http_method'(가들어오면):'처리할 _함수'(로 처리할꺼야)})

12. pagination

API서버상의 페이지네이션??
왜 필요하지??
의의 : 하나의 request만으로 처리하기 어려운 레코드들을 여러 request로 나누어 전송함.

-DRF의 페이지네이션 구현
by...
1.PageNumberPagination*(디폴트로 설정)
2.LimitOffsetPagination
3.CursorPagination
------DRF 제공 클래스
4.CustomizedPagination*(추가적인 page설정이 필요한 부분만)


13. filtering and search

Filtering 		VS 		Search
-Reqeust걸러 보내기	   -Response걸러받기


14. Authentication

동작원리  : CRUD
운영원리 : Authentication & Permission -> 제 3자를 비롯한 모든 사용자에게 동일한 권한을 주지 않음
Authentication = 서비스를 이용할 때 내가 어느정도의 권한이 있음을 알려주는(요청하는) 과정
Permission  = 서비스를 어느정도로 이용할 수 있는지에 대한 권한

Authentication 
-Basic~ : http 자체 기본인증에 기반한 인증방식, http제어 헤더로 넘긴 id, pw를 base64 encoding
-Token~:http보완, 유일한 key값이용
-Session:장고 디폴트, 장고가 로그인이 될때마다 생성되는 세션을 참고하여 관리함.
-RemoteUser~:다른서버에서 관리될 때.

15. permission
:View호출 시 가장 먼저 체크되고 인증정보(request.user, request.auth)를 기반으로 군한은 체크함.
-AllowAny
 : 인증된 요청이든 비인증 요청이든 전부 허용하겠다.
-IsAuthenticated
 : 인증된 요청에 대해서만 View 호출을 허용하겠다
(등록된 사용자에게만 Accesss허용)
-IsAdminUser
 : staff user에 대해서만 요청을 허용하겠다
-IsAuthenticatedOrReadOnly
 : 비인증 요청은 읽기만 즉 '안전한 http method'만 허용하겠다.

16. token인증
BasicAuthentication, SessionAuthentication의 한계때문에 생김.
Mobile Client에 적함함.
사용단계
1) username, password 와 1:! 매칭되는 고유 key생성, 발급
	발급 방법
	1.rest_framework/authtoken.views.py의 ObtainAuthToken을 이용한 생성
	2.python 명령어를 통한 생성
	+ signal을 이용한 token획득
		: post_save() - DB에 뭔가가 저장된 직후에 특정 동작 수행
2)발급받는 token을 API요청에 담아 인증처리

